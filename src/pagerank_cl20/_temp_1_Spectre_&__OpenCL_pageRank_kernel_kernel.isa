ShaderType = IL_SHADER_COMPUTE
TargetChip = t
; ------------- SC_SRCSHADER Dump ------------------
SC_SHADERSTATE: u32NumIntVSConst = 0
SC_SHADERSTATE: u32NumIntPSConst = 0
SC_SHADERSTATE: u32NumIntGSConst = 0
SC_SHADERSTATE: u32NumBoolVSConst = 0
SC_SHADERSTATE: u32NumBoolPSConst = 0
SC_SHADERSTATE: u32NumBoolGSConst = 0
SC_SHADERSTATE: u32NumFloatVSConst = 0
SC_SHADERSTATE: u32NumFloatPSConst = 0
SC_SHADERSTATE: u32NumFloatGSConst = 0
u32SCOptions[0] = 0x00680000 SCOption_IGNORE_SAMPLE_L_BUG SCOption_FLOAT_DO_NOT_DIST SCOption_FLOAT_DO_NOT_REASSOC
u32SCOptions[1] = 0x00000000
u32SCOptions[2] = 0x08000000 SCOption_R1000_READLANE_SMRD_WORKAROUND_BUG343479
u32SCOptions[3] = 0x00001284 SCOption_R1000_BARRIER_WORKAROUND_BUG405404 SCOption_R1000_IFORK_BACKJUMP_WORKAROUND_BUG368004 SCOption_R1000R1100_VCCZ_CLOBBER_WORKAROUND_BUG457939 SCOption_R1100_FLAT_SCRATCH_OOB_WORKAROUND_BUG379895
u32SCOptions[4] = 0x00000000
; -------- Disassembly --------------------
shader main
  asic(CI)
  type(CS)

  s_load_dword  s4, s[4:5], 0x01                        // 000000000000: C0020501
  s_mov_b32     m0, 0x00010000                          // 000000000004: BEFC03FF 00010000
  s_waitcnt     lgkmcnt(0)                              // 00000000000C: BF8C007F
  s_bfe_u32     s4, s4, 0x00100000                      // 000000000010: 9384FF04 00100000
  s_mul_i32     s4, s4, s8                              // 000000000018: 93040804
  v_add_i32     v1, vcc, s4, v0                         // 00000000001C: 4A020004
  s_load_dwordx2  s[0:1], s[6:7], 0x00                  // 000000000020: C0400700
  s_waitcnt     lgkmcnt(0)                              // 000000000024: BF8C007F
  s_load_dword  s1, s[6:7], 0x0c                        // 000000000028: C000870C
  v_add_i32     v2, vcc, s0, v1                         // 00000000002C: 4A040200
  v_ashrrev_i32  v3, 31, v2                             // 000000000030: 3006049F
  v_lshrrev_b32  v3, 26, v3                             // 000000000034: 2C06069A
  v_add_i32     v3, vcc, v2, v3                         // 000000000038: 4A060702
  v_ashrrev_i32  v3, 6, v3                              // 00000000003C: 30060686
  s_waitcnt     lgkmcnt(0)                              // 000000000040: BF8C007F
  v_cmp_gt_i32  vcc, s1, v3                             // 000000000044: 7D080601
  s_and_saveexec_b64  s[2:3], vcc                       // 000000000048: BE82246A
  s_cbranch_execz  label_009E                           // 00000000004C: BF88008A
  s_load_dwordx2  s[4:5], s[6:7], 0x18                  // 000000000050: C0420718
  s_load_dwordx2  s[8:9], s[6:7], 0x0e                  // 000000000054: C044070E
  v_ashrrev_i32  v4, 31, v3                             // 000000000058: 3008069F
  v_lshl_b64    v[3:4], v[3:4], 2                       // 00000000005C: D2C20003 00010503
  s_waitcnt     lgkmcnt(0)                              // 000000000064: BF8C007F
  v_add_i32     v5, vcc, s4, v3                         // 000000000068: 4A0A0604
  v_mov_b32     v6, s5                                  // 00000000006C: 7E0C0205
  v_addc_u32    v6, vcc, v6, v4, vcc                    // 000000000070: 500C0906
  v_mov_b32     v7, 0                                   // 000000000074: 7E0E0280
  v_add_i32     v3, vcc, s8, v3                         // 000000000078: 4A060608
  v_mov_b32     v8, s9                                  // 00000000007C: 7E100209
  v_addc_u32    v4, vcc, v8, v4, vcc                    // 000000000080: 50080908
  flat_store_dword  v[5:6], v7                          // 000000000084: DC700000 00000705
  flat_load_dwordx2  v[3:4], v[3:4]                     // 00000000008C: DC340000 03000003
  s_load_dwordx2  s[4:5], s[6:7], 0x14                  // 000000000094: C0420714
  v_and_b32     v2, 63, v2                              // 000000000098: 360404BF
  v_lshlrev_b32  v0, 2, v0                              // 00000000009C: 34000082
  s_waitcnt     lgkmcnt(0)                              // 0000000000A0: BF8C007F
  v_add_i32     v0, vcc, s4, v0                         // 0000000000A4: 4A000004
  s_waitcnt     vmcnt(0)                                // 0000000000A8: BF8C0F70
  v_add_i32     v14, vcc, v3, v2                        // 0000000000AC: 4A1C0503
  ds_write_b32  v0, v7                                  // 0000000000B0: D8340000 00000700
  v_cmp_lt_i32  vcc, v14, v4                            // 0000000000B8: 7D02090E
  s_and_saveexec_b64  s[4:5], vcc                       // 0000000000BC: BE84246A
  s_cbranch_execz  label_0061                           // 0000000000C0: BF880030
  s_load_dwordx2  s[8:9], s[6:7], 0x16                  // 0000000000C4: C0440716
  s_load_dwordx4  s[12:15], s[6:7], 0x10                // 0000000000C8: C0860710
  v_add_i32     v1, vcc, s0, v1                         // 0000000000CC: 4A020200
  v_and_b32     v1, 63, v1                              // 0000000000D0: 360202BF
  v_add_i32     v9, vcc, v3, v1                         // 0000000000D4: 4A120303
  v_ashrrev_i32  v10, 31, v9                            // 0000000000D8: 3014129F
  v_lshl_b64    v[9:10], v[9:10], 2                     // 0000000000DC: D2C20009 00010509
  s_waitcnt     lgkmcnt(0)                              // 0000000000E4: BF8C007F
  v_add_i32     v15, vcc, s14, v9                       // 0000000000E8: 4A1E120E
  v_mov_b32     v3, s15                                 // 0000000000EC: 7E06020F
  v_addc_u32    v16, vcc, v3, v10, vcc                  // 0000000000F0: 50201503
  v_add_i32     v7, vcc, s12, v9                        // 0000000000F4: 4A0E120C
  v_mov_b32     v9, s13                                 // 0000000000F8: 7E12020D
  v_addc_u32    v8, vcc, v9, v10, vcc                   // 0000000000FC: 50101509
  s_mov_b64     s[0:1], exec                            // 000000000100: BE80047E
  v_mov_b32     v1, 0                                   // 000000000104: 7E020280
label_0042:
  flat_load_dword  v11, v[7:8]                          // 000000000108: DC300000 0B000007
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000110: BF8C0070
  v_ashrrev_i32  v12, 31, v11                           // 000000000114: 3018169F
  v_lshl_b64    v[11:12], v[11:12], 2                   // 000000000118: D2C2000B 0001050B
  v_add_i32     v11, vcc, s8, v11                       // 000000000120: 4A161608
  v_mov_b32     v13, s9                                 // 000000000124: 7E1A0209
  v_addc_u32    v12, vcc, v13, v12, vcc                 // 000000000128: 5018190D
  flat_load_dword  v11, v[11:12]                        // 00000000012C: DC300000 0B00000B
  flat_load_dword  v12, v[15:16]                        // 000000000134: DC300000 0C00000F
  s_movk_i32    s6, 0x0100                              // 00000000013C: B0060100
  v_add_i32     v15, vcc, v15, s6                       // 000000000140: D24A6A0F 00000D0F
  v_addc_u32    v16, vcc, v16, 0, vcc                   // 000000000148: D2506A10 01A90110
  v_add_i32     v7, vcc, v7, s6                         // 000000000150: D24A6A07 00000D07
  v_addc_u32    v8, vcc, v8, 0, vcc                     // 000000000158: D2506A08 01A90108
  v_add_i32     v14, vcc, 64, v14                       // 000000000160: 4A1C1CC0
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000164: BF8C0070
  v_mac_f32     v1, v12, v11                            // 000000000168: 3E02170C
  ds_write_b32  v0, v1                                  // 00000000016C: D8340000 00000100
  v_cmp_lt_i32  vcc, v14, v4                            // 000000000174: 7D02090E
  s_and_b64     exec, exec, vcc                         // 000000000178: 87FE6A7E
  s_cbranch_execnz  label_0042                          // 00000000017C: BF89FFE2
  s_mov_b64     exec, s[0:1]                            // 000000000180: BEFE0400
label_0061:
  s_andn2_b64   exec, s[4:5], exec                      // 000000000184: 8AFE7E04
  v_mov_b32     v1, 0                                   // 000000000188: 7E020280
  s_mov_b64     exec, s[4:5]                            // 00000000018C: BEFE0404
  v_cmp_ge_u32  vcc, 31, v2                             // 000000000190: 7D8C049F
  s_and_saveexec_b64  s[0:1], vcc                       // 000000000194: BE80246A
  s_cbranch_execz  label_009E                           // 000000000198: BF880037
  ds_read_b32   v3, v0 offset:128                       // 00000000019C: D8D80080 03000000
  s_waitcnt     lgkmcnt(0)                              // 0000000001A4: BF8C007F
  v_add_f32     v1, v3, v1                              // 0000000001A8: 06020303
  ds_write_b32  v0, v1                                  // 0000000001AC: D8340000 00000100
  v_cmp_ge_u32  vcc, 15, v2                             // 0000000001B4: 7D8C048F
  s_and_saveexec_b64  s[4:5], vcc                       // 0000000001B8: BE84246A
  s_cbranch_execz  label_009E                           // 0000000001BC: BF88002E
  ds_read_b32   v3, v0 offset:64                        // 0000000001C0: D8D80040 03000000
  s_waitcnt     lgkmcnt(0)                              // 0000000001C8: BF8C007F
  v_add_f32     v1, v3, v1                              // 0000000001CC: 06020303
  ds_write_b32  v0, v1                                  // 0000000001D0: D8340000 00000100
  v_cmp_ge_u32  vcc, 7, v2                              // 0000000001D8: 7D8C0487
  s_and_saveexec_b64  s[6:7], vcc                       // 0000000001DC: BE86246A
  s_cbranch_execz  label_009E                           // 0000000001E0: BF880025
  ds_read_b32   v3, v0 offset:32                        // 0000000001E4: D8D80020 03000000
  s_waitcnt     lgkmcnt(0)                              // 0000000001EC: BF8C007F
  v_add_f32     v1, v3, v1                              // 0000000001F0: 06020303
  ds_write_b32  v0, v1                                  // 0000000001F4: D8340000 00000100
  v_cmp_ge_u32  vcc, 3, v2                              // 0000000001FC: 7D8C0483
  s_and_saveexec_b64  s[8:9], vcc                       // 000000000200: BE88246A
  s_cbranch_execz  label_009E                           // 000000000204: BF88001C
  ds_read_b32   v3, v0 offset:16                        // 000000000208: D8D80010 03000000
  s_waitcnt     lgkmcnt(0)                              // 000000000210: BF8C007F
  v_add_f32     v1, v3, v1                              // 000000000214: 06020303
  ds_write_b32  v0, v1                                  // 000000000218: D8340000 00000100
  v_cmp_ge_u32  vcc, 1, v2                              // 000000000220: 7D8C0481
  s_and_saveexec_b64  s[10:11], vcc                     // 000000000224: BE8A246A
  s_cbranch_execz  label_009E                           // 000000000228: BF880013
  ds_read_b32   v3, v0 offset:8                         // 00000000022C: D8D80008 03000000
  s_waitcnt     lgkmcnt(0)                              // 000000000234: BF8C007F
  v_add_f32     v1, v3, v1                              // 000000000238: 06020303
  ds_write_b32  v0, v1                                  // 00000000023C: D8340000 00000100
  v_cmp_eq_i32  vcc, 0, v2                              // 000000000244: 7D040480
  s_and_saveexec_b64  s[12:13], vcc                     // 000000000248: BE8C246A
  s_cbranch_execz  label_009E                           // 00000000024C: BF88000A
  flat_load_dword  v2, v[5:6]                           // 000000000250: DC300000 02000005
  ds_read_b32   v0, v0 offset:4                         // 000000000258: D8D80004 00000000
  s_waitcnt     lgkmcnt(0)                              // 000000000260: BF8C007F
  v_add_f32     v0, v0, v1                              // 000000000264: 06000300
  s_waitcnt     vmcnt(0)                                // 000000000268: BF8C0F70
  v_add_f32     v0, v2, v0                              // 00000000026C: 06000102
  flat_store_dword  v[5:6], v0                          // 000000000270: DC700000 00000005
label_009E:
  s_endpgm                                              // 000000000278: BF810000
end
; ----------------- CS Data ------------------------

codeLenInByte        = 1148 bytes;
objectHeaderByteSize = 512 bytes;

; launchModeFlags    = 0x00000200
isAql                = TRUE;

userElementCount     = 0;
extUserElementCount  = 0;
NumVgprs             = 17;
NumSgprs             = 16;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000000
; constBufUsage           = 0x00000000

;COMPUTE_PGM_RSRC2       = 0x00000090
COMPUTE_PGM_RSRC2:USER_SGPR      = 8
COMPUTE_PGM_RSRC2:TGID_X_EN      = 1
; ---------------------------- HSA Code Descriptor ----------------------------
code_type                                      = HSA_EXT_CODE_KERNEL
kernarg_segment_byte_size                      = 104
code.handle                                    = 256%
kernarg_segment_alignment                      = 3
wavefront_size                                 = 6
program_call_convention                        = 0
module.handle                                  = 0
symbol                                         = 96
hsail_profile                                  = HSA_EXT_BRIG_PROFILE_FULL
hsail_machine_model                            = HSA_EXT_BRIG_MACHINE_LARGE
debug_information.handle                       = 0
agent_vendor                                   = AMD
agent_name                                     = gfx7
hsail_version_major                            = 0
hsail_version_minor                            = 20140528
; ---------------------------- AMD Code Descriptor ----------------------------
amd_code_version_major                         = 0
amd_code_version_minor                         = 0
struct_byte_size                               = 256
target_chip                                    = gfx7
kernel_code_entry_byte_offset                  = 256
max_scratch_backing_memory_byte_size           = 0
; compute_pgm_rsrc1:
  granulated_workitem_vgpr_count                       = 4
  granulated_wavefront_sgpr_count                      = 2
  priority                                             = 0
  float_mode_round_32                                  = ROUND_TO_NEAREST_EVEN
  float_mode_round_16_64                               = ROUND_TO_NEAREST_EVEN
  float_mode_denorm_32                                 = FLUSH_SOURCE_OUTPUT
  float_mode_denorm_16_64                              = FLUSH_NONE
; compute_pgm_rsrc2:
  user_sgpr_count                                      = 8
  enable_sgpr_workgroup_id_x                           = TRUE
  enable_vgpr_workitem_id                              = X
  granulated_lds_size                                  = 0
enable_sgpr_private_segment_buffer             = TRUE
enable_sgpr_dispatch_ptr                       = TRUE
enable_sgpr_kernarg_segment_ptr                = TRUE
private_element_size                           = DWORD (4 bytes)
is_ptr64                                       = TRUE
gds_segment_byte_size                          = 0
wavefront_sgpr_count                           = 16
workitem_vgpr_count                            = 17
kernarg_segment_byte_size                      = 104
kernarg_segment_alignment                      = 3
code_alignment                                 = 3
code_type                                      = HSA_EXT_CODE_KERNEL
wavefront_size                                 = 6
optimization_level                             = 2
hsail_profile                                  = HSA_EXT_BRIG_PROFILE_FULL
hsail_machine_model                            = HSA_EXT_BRIG_MACHINE_LARGE
hsail_version_major                            = 0
hsail_version_minor                            = 20140528
