version 0:20140528:$full:$large;
extension "amd:gcn";
extension "IMAGE";

decl prog function &abort()();

prog kernel &__OpenCL_pageRank_kernel_kernel(
	kernarg_u64 %global_offset_0,
	kernarg_u64 %global_offset_1,
	kernarg_u64 %global_offset_2,
	kernarg_u64 %printf_buffer,
	kernarg_u64 %vqueue_pointer,
	kernarg_u64 %aqlwrap_pointer,
	kernarg_u32 %num_rows,
	kernarg_u64 %rowOffset,
	kernarg_u64 %col,
	kernarg_u64 %val,
	kernarg_u64 %vals,
	kernarg_u64 %x,
	kernarg_u64 %y)
{
	pragma  "AMD RTI", "ARGSTART:__OpenCL_pageRank_kernel_kernel";
	pragma  "AMD RTI", "version:3:1:104";
	pragma  "AMD RTI", "device:generic";
	pragma  "AMD RTI", "uniqueid:1024";
	pragma  "AMD RTI", "memory:private:0";
	pragma  "AMD RTI", "memory:region:0";
	pragma  "AMD RTI", "memory:local:0";
	pragma  "AMD RTI", "value:global_offset_0:u64:1:1:0";
	pragma  "AMD RTI", "value:global_offset_1:u64:1:1:16";
	pragma  "AMD RTI", "value:global_offset_2:u64:1:1:32";
	pragma  "AMD RTI", "pointer:printf_buffer:u8:1:1:48:uav:8:1:RW:0:0:0";
	pragma  "AMD RTI", "value:vqueue_pointer:u64:1:1:64";
	pragma  "AMD RTI", "value:aqlwrap_pointer:u64:1:1:80";
	pragma  "AMD RTI", "value:num_rows:u32:1:1:96";
	pragma  "AMD RTI", "pointer:rowOffset:u32:1:1:112:uav:8:4:RW:0:0:0";
	pragma  "AMD RTI", "pointer:col:u32:1:1:128:uav:8:4:RW:0:0:0";
	pragma  "AMD RTI", "pointer:val:float:1:1:144:uav:8:4:RW:0:0:0";
	pragma  "AMD RTI", "pointer:vals:float:1:1:160:l:8:4:RW:0:0:0";
	pragma  "AMD RTI", "pointer:x:float:1:1:176:uav:8:4:RW:0:0:0";
	pragma  "AMD RTI", "pointer:y:float:1:1:192:uav:8:4:RW:0:0:0";
	pragma  "AMD RTI", "function:1:0";
	pragma  "AMD RTI", "memory:64bitABI";
	pragma  "AMD RTI", "uavid:8";
	pragma  "AMD RTI", "privateid:8";
	pragma  "AMD RTI", "enqueue_kernel:0";
	pragma  "AMD RTI", "kernel_index:0";
	pragma  "AMD RTI", "reflection:0:size_t";
	pragma  "AMD RTI", "reflection:1:size_t";
	pragma  "AMD RTI", "reflection:2:size_t";
	pragma  "AMD RTI", "reflection:3:size_t";
	pragma  "AMD RTI", "reflection:4:size_t";
	pragma  "AMD RTI", "reflection:5:size_t";
	pragma  "AMD RTI", "reflection:6:int";
	pragma  "AMD RTI", "reflection:7:int*";
	pragma  "AMD RTI", "reflection:8:int*";
	pragma  "AMD RTI", "reflection:9:float*";
	pragma  "AMD RTI", "reflection:10:float*";
	pragma  "AMD RTI", "reflection:11:float*";
	pragma  "AMD RTI", "reflection:12:float*";
	pragma  "AMD RTI", "ARGEND:__OpenCL_pageRank_kernel_kernel";

@__OpenCL_pageRank_kernel_kernel_entry:
	// BB#0:
	workitemabsid_u32	$s0, 0;
	cvt_u64_u32	$d3, $s0;
	ld_kernarg_align(8)_width(all)_u64	$d4, [%global_offset_0];
	add_u64	$d0, $d3, $d4;
	cvt_u32_u64	$s0, $d0;
	shr_s32	$s1, $s0, 31;
	shr_u32	$s1, $s1, 26;
	add_u32	$s1, $s0, $s1;
	ld_kernarg_align(4)_width(all)_u32	$s2, [%num_rows];
	shr_s32	$s1, $s1, 6;
	cmp_ge_b1_s32	$c0, $s1, $s2;
	cbr_b1	$c0, @BB0_12;
	// BB#1:
	ld_kernarg_align(8)_width(all)_u64	$d0, [%y];
	and_b32	$s0, $s0, 63;
	ld_kernarg_align(8)_width(all)_u64	$d2, [%x];
	ld_kernarg_align(8)_width(all)_u64	$d1, [%vals];
	ld_kernarg_align(8)_width(all)_u64	$d5, [%rowOffset];
	cvt_s64_s32	$d6, $s1;
	shl_u64	$d6, $d6, 2;
	add_u64	$d0, $d0, $d6;
	st_global_align(4)_u32	0, [$d0];
	add_u64	$d5, $d5, $d6;
	ld_v2_global_align(4)_u32	($s2, $s1), [$d5];
	workitemid_u32	$s3, 0;
	cvt_s64_s32	$d5, $s3;
	shl_u64	$d5, $d5, 2;
	add_u64	$d1, $d1, $d5;
	cvt_u32_u64	$s3, $d1;
	st_group_align(4)_u32	0, [$s3];
	add_u32	$s3, $s2, $s0;
	cmp_ge_b1_s32	$c0, $s3, $s1;
	cbr_b1	$c0, @BB0_2;
	// BB#3:                                // %.lr.ph.preheader
	ld_kernarg_align(8)_width(all)_u64	$d5, [%col];
	ld_kernarg_align(8)_width(all)_u64	$d6, [%val];
	add_u64	$d3, $d4, $d3;
	cvt_u32_u64	$s4, $d3;
	and_b32	$s4, $s4, 63;
	add_u32	$s2, $s2, $s4;
	cvt_s64_s32	$d3, $s2;
	mov_b32	$s2, 0;
	shl_u64	$d4, $d3, 2;
	add_u64	$d3, $d6, $d4;
	add_u64	$d4, $d5, $d4;

@BB0_4:
	// %.lr.ph
	ld_global_align(4)_u32	$s4, [$d4];
	cvt_s64_s32	$d5, $s4;
	shl_u64	$d5, $d5, 2;
	add_u64	$d5, $d2, $d5;
	ld_global_align(4)_f32	$s5, [$d5];
	ld_global_align(4)_f32	$s6, [$d3];
	cvt_u32_u64	$s4, $d1;
	mul_ftz_f32	$s5, $s6, $s5;
	add_u64	$d3, $d3, 256;
	add_u64	$d4, $d4, 256;
	add_u32	$s3, $s3, 64;
	add_ftz_f32	$s2, $s2, $s5;
	st_group_align(4)_f32	$s2, [$s4];
	cmp_lt_b1_s32	$c0, $s3, $s1;
	cbr_b1	$c0, @BB0_4;
	br	@BB0_5;

@BB0_2:
	mov_b32	$s2, 0;

@BB0_5:
	// %._crit_edge
	cmp_gt_b1_u32	$c0, $s0, 31;
	cbr_b1	$c0, @BB0_12;
	// BB#6:
	cvt_u32_u64	$s3, $d1;
	cvt_u32_u64	$s1, $d1;
	ld_group_align(4)_f32	$s1, [$s1+128];
	add_ftz_f32	$s1, $s1, $s2;
	st_group_align(4)_f32	$s1, [$s3];
	cmp_gt_b1_u32	$c0, $s0, 15;
	cbr_b1	$c0, @BB0_12;
	// BB#7:
	cvt_u32_u64	$s2, $d1;
	cvt_u32_u64	$s3, $d1;
	ld_group_align(4)_f32	$s3, [$s3+64];
	add_ftz_f32	$s1, $s3, $s1;
	st_group_align(4)_f32	$s1, [$s2];
	cmp_gt_b1_u32	$c0, $s0, 7;
	cbr_b1	$c0, @BB0_12;
	// BB#8:                                // %.thread1
	cvt_u32_u64	$s2, $d1;
	cvt_u32_u64	$s3, $d1;
	ld_group_align(4)_f32	$s3, [$s3+32];
	add_ftz_f32	$s1, $s3, $s1;
	st_group_align(4)_f32	$s1, [$s2];
	cmp_gt_b1_u32	$c0, $s0, 3;
	cbr_b1	$c0, @BB0_12;
	// BB#9:
	cvt_u32_u64	$s2, $d1;
	cvt_u32_u64	$s3, $d1;
	ld_group_align(4)_f32	$s3, [$s3+16];
	add_ftz_f32	$s1, $s3, $s1;
	st_group_align(4)_f32	$s1, [$s2];
	cmp_gt_b1_u32	$c0, $s0, 1;
	cbr_b1	$c0, @BB0_12;
	// BB#10:                                // %.thread4
	cvt_u32_u64	$s2, $d1;
	cvt_u32_u64	$s3, $d1;
	ld_group_align(4)_f32	$s3, [$s3+8];
	add_ftz_f32	$s1, $s3, $s1;
	st_group_align(4)_f32	$s1, [$s2];
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_12;
	// BB#11:
	cvt_u32_u64	$s0, $d1;
	cvt_u32_u64	$s2, $d1;
	ld_group_align(4)_f32	$s2, [$s2+4];
	add_ftz_f32	$s1, $s2, $s1;
	st_group_align(4)_f32	$s1, [$s0];
	ld_global_align(4)_f32	$s0, [$d0];
	add_ftz_f32	$s0, $s0, $s1;
	st_global_align(4)_f32	$s0, [$d0];

@BB0_12:
	// %.thread5
	ret;
};
