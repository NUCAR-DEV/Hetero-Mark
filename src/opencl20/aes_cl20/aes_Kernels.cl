//OpenCL 2.0 AES256 Kernal Code
//Application auto-inserts expanded key and headers into source code above

__constant uchar s[256] = {
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
}; //The s-box is always constant, so it is included in the source

__kernel void sb_st(__local uchar* in) //Performs an S-box substitution on an entire state
{
    for (int i = 0; i < 16; i++) { in[i] = s[in[i]]; }
}

__kernel void mc(__local uchar* arr) //The mix-columns operation, performs a mathematical transformation on the state (logic defined in specification)
{
    for (int i = 0; i < 4; i++)
    {
        uchar a[4];
        uchar b[4];
        uchar c;
        uchar h;
        for(c=0;c<4;c++) {
            a[c] = arr[(4*c+i)];
            h = (uchar)((signed char)arr[(4*c+i)] >> 7);
            b[c] = arr[(4*c+i)] << 1;
            b[c] ^= 0x1B & h;
        }
        arr[(i)] = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1];
        arr[(4+i)] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2];
        arr[(8+i)] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3];
        arr[(12+i)] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0];
    }
    
}

__kernel void sr(__local uchar* arr) //Shifts the data in each row in the state by an increasing index
{
    uchar out[16];
    //On per-row basis (+1 shift X each row)
    //Row 1
    out[0] = arr[0];
    out[1] = arr[1];
    out[2] = arr[2];
    out[3] = arr[3];
    //Row 2
    out[4] = arr[5];
    out[5] = arr[6];
    out[6] = arr[7];
    out[7] = arr[4];
    //Row 3
    out[8] = arr[10];
    out[9] = arr[11];
    out[10] = arr[8];
    out[11] = arr[9];
    //Row 4
    out[12] = arr[15];
    out[13] = arr[12];
    out[14] = arr[13];
    out[15] = arr[14];
    
    for (int i = 0; i < 16; i++)
    {
        arr[i] = out[i];
    }
}

__kernel void ark(__local uchar* state, int strD) //Add round key: XORs words from the expanded key to the state
{
    union {
        uint word;
        uchar bytes[4];
    } kb[4] __attribute__ ((aligned));
    
    kb[0].word = eK[strD]; //eK is added to the source code, that is why it is not defined in this file
    kb[1].word = eK[strD+1];
    kb[2].word = eK[strD+2];
    kb[3].word = eK[strD+3];
    
    for (int i = 0; i < 4; i++)
    {
        state[i] = state[i] ^ kb[i].bytes[3];
        state[i+4] = state[i+4] ^ kb[i].bytes[2];
        state[i+8] = state[i+8] ^ kb[i].bytes[1];
        state[i+12] = state[i+12] ^ kb[i].bytes[0];
    }
}

__kernel void CLRunner(__global uchar* in) //Note: uchar is equal to uint32_t and uint is equal to uint8_t from the host code, OpenCL does not define these types
{
    __local uchar state[16];
    int localid = (int)get_global_id(0); //Data is shifted by 16 * ID of worker
    for (int i = 0; i < 16; i++) { state[i] = in[(localid*16)+i]; }
	
    ark(state, 0); //The code from here to the end (order and number of loops) are defined by the specification explicitly
    
    for (int i = 1; i < 14; i++)
    {
        sb_st(state);
        sr(state);
        mc(state);
        ark(state, i*Nb);
    }
    
    sb_st(state);
    sr(state);
    ark(state, Nr*Nb);
	
    for (int i = 0; i < 16; i++) { in[(localid*16)+i] = state[i]; }
}

