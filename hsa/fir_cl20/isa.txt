; -------- Disassembly --------------------
shader main
  asic(CI)
  type(VS)

  s_load_dword  s0, s[4:5], 0x01                        // 000000000000: C0000501
  s_waitcnt     lgkmcnt(0)                              // 000000000004: BF8C007F
  s_bfe_u32     s0, s0, 0x00100000                      // 000000000008: 9380FF00 00100000
  s_mul_i32     s0, s0, s8                              // 000000000010: 93000800
  v_add_i32     v0, vcc, s0, v0                         // 000000000014: 4A000000
  s_load_dwordx2  s[0:1], s[6:7], 0x00                  // 000000000018: C0400700
  s_waitcnt     lgkmcnt(0)                              // 00000000001C: BF8C007F
  s_load_dword  s1, s[6:7], 0x12                        // 000000000020: C0008712
  v_add_i32     v7, s[2:3], v0, s0                      // 000000000024: D24A0207 00000100
  s_waitcnt     lgkmcnt(0)                              // 00000000002C: BF8C007F
  v_add_i32     v1, vcc, s1, v7                         // 000000000030: 4A020E01
  s_load_dwordx2  s[2:3], s[6:7], 0x10                  // 000000000034: C0410710
  s_cmp_eq_i32  s1, 0                                   // 000000000038: BF008001
  s_cbranch_scc1  label_0027                            // 00000000003C: BF850017
  s_load_dwordx2  s[8:9], s[6:7], 0x0e                  // 000000000040: C044070E
  v_mov_b32     v2, 0                                   // 000000000044: 7E040280
  s_mov_b32     s0, s1                                  // 000000000048: BE800301
  v_mov_b32     v3, v7                                  // 00000000004C: 7E060307
label_0014:
  v_mov_b32     v4, 0                                   // 000000000050: 7E080280
  v_lshl_b64    v[4:5], v[3:4], 2                       // 000000000054: D2C20004 00010503
  s_waitcnt     lgkmcnt(0)                              // 00000000005C: BF8C007F
  v_add_i32     v4, vcc, s2, v4                         // 000000000060: 4A080802
  v_mov_b32     v6, s3                                  // 000000000064: 7E0C0203
  v_addc_u32    v5, vcc, v6, v5, vcc                    // 000000000068: 500A0B06
  flat_load_dword  v4, v[4:5]                           // 00000000006C: DC300000 04000004
  s_load_dword  s10, s[8:9], 0x00                       // 000000000074: C0050900
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000078: BF8C0070
  v_mac_f32     v2, s10, v4                             // 00000000007C: 3E04080A
  s_add_u32     s8, s8, 4                               // 000000000080: 80088408
  s_addc_u32    s9, s9, 0                               // 000000000084: 82098009
  v_add_i32     v3, vcc, 1, v3                          // 000000000088: 4A060681
  s_add_u32     s0, s0, -1                              // 00000000008C: 8000C100
  s_cmp_eq_i32  s0, 0                                   // 000000000090: BF008000
  s_cbranch_scc1  label_0028                            // 000000000094: BF850002
  s_branch      label_0014                              // 000000000098: BF82FFED
label_0027:
  v_mov_b32     v2, 0                                   // 00000000009C: 7E040280
label_0028:
  s_load_dwordx2  s[6:7], s[6:7], 0x0c                  // 0000000000A0: C043070C
  s_load_dword  s0, s[4:5], 0x03                        // 0000000000A4: C0000503
  v_mov_b32     v8, 0                                   // 0000000000A8: 7E100280
  v_lshl_b64    v[3:4], v[7:8], 2                       // 0000000000AC: D2C20003 00010507
  s_waitcnt     lgkmcnt(0)                              // 0000000000B4: BF8C007F
  v_add_i32     v3, vcc, s6, v3                         // 0000000000B8: 4A060606
  v_mov_b32     v5, s7                                  // 0000000000BC: 7E0A0207
  v_addc_u32    v4, vcc, v5, v4, vcc                    // 0000000000C0: 50080905
  s_sub_u32     s0, s0, s1                              // 0000000000C4: 80800100
  flat_store_dword  v[3:4], v2                          // 0000000000C8: DC700000 00000203
  s_add_u32     s0, s0, 1                               // 0000000000D0: 80008100
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 0000000000D4: BF8C0070
  s_barrier                                             // 0000000000D8: BF8A0000
  v_cmp_le_u32  vcc, s0, v7                             // 0000000000DC: 7D860E00
  s_and_saveexec_b64  s[4:5], vcc                       // 0000000000E0: BE84246A
  v_add_i32     v1, vcc, -1, v1                         // 0000000000E4: 4A0202C1
  s_cbranch_execz  label_004C                           // 0000000000E8: BF880011
  v_mov_b32     v2, 0                                   // 0000000000EC: 7E040280
  v_lshl_b64    v[1:2], v[1:2], 2                       // 0000000000F0: D2C20001 00010501
  v_add_i32     v1, vcc, s2, v1                         // 0000000000F8: 4A020202
  v_mov_b32     v3, s3                                  // 0000000000FC: 7E060203
  v_addc_u32    v2, vcc, v3, v2, vcc                    // 000000000100: 50040503
  flat_load_dword  v1, v[1:2]                           // 000000000104: DC300000 01000001
  v_subrev_i32  v4, vcc, s0, v7                         // 00000000010C: 4E080E00
  v_mov_b32     v5, 0                                   // 000000000110: 7E0A0280
  v_lshl_b64    v[4:5], v[4:5], 2                       // 000000000114: D2C20004 00010504
  v_add_i32     v2, vcc, s2, v4                         // 00000000011C: 4A040802
  v_addc_u32    v3, vcc, v3, v5, vcc                    // 000000000120: 50060B03
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000124: BF8C0070
  flat_store_dword  v[2:3], v1                          // 000000000128: DC700000 00000102
label_004C:
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000130: BF8C0070
  s_barrier                                             // 000000000134: BF8A0000
  s_endpgm                                              // 000000000138: BF810000
end

