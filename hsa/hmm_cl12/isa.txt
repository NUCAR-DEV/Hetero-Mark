; -------- Disassembly --------------------
shader main
  asic(CI)
  type(VS)

  s_mov_b32     m0, 0x00010000                          // 000000000000: BEFC03FF 00010000
  v_or_b32      v2, v1, v0                              // 000000000008: 38040101
  v_cmp_eq_i32  vcc, 0, v2                              // 00000000000C: 7D040480
  s_and_saveexec_b64  s[0:1], vcc                       // 000000000010: BE80246A
  s_cbranch_execz  label_003F                           // 000000000014: BF880039
  s_load_dword  s2, s[4:5], 0x0c                        // 000000000018: C001050C
  s_waitcnt     lgkmcnt(0)                              // 00000000001C: BF8C007F
  s_add_u32     s2, s2, 1                               // 000000000020: 80028102
  s_mov_b64     s[8:9], exec                            // 000000000024: BE88047E
  s_mov_b64     s[10:11], exec                          // 000000000028: BE8A047E
  v_mov_b32     v2, 0                                   // 00000000002C: 7E040280
  v_mov_b32     v3, 1                                   // 000000000030: 7E060281
  v_mov_b32     v7, 0                                   // 000000000034: 7E0E0280
label_000E:
  v_add_i32     v5, vcc, 2, v7                          // 000000000038: 4A0A0E82
  v_cmp_lt_i32  vcc, s2, v5                             // 00000000003C: 7D020A02
  s_mov_b64     s[12:13], exec                          // 000000000040: BE8C047E
  s_andn2_b64   exec, s[12:13], vcc                     // 000000000044: 8AFE6A0C
  s_andn2_b64   exec, s[12:13], exec                    // 000000000048: 8AFE7E0C
  v_mov_b32     v3, 1                                   // 00000000004C: 7E060281
  s_cbranch_execz  label_0017                           // 000000000050: BF880002
  s_andn2_b64   s[10:11], s[10:11], exec                // 000000000054: 8A8A7E0A
  s_cbranch_scc0  label_0029                            // 000000000058: BF840012
label_0017:
  s_and_b64     exec, s[12:13], s[10:11]                // 00000000005C: 87FE0A0C
  v_cmp_lt_i32  s[12:13], s6, v3                        // 000000000060: D102000C 00020606
  v_cmp_ge_i32  vcc, s6, v2                             // 000000000068: 7D0C0406
  s_and_b64     s[12:13], vcc, s[12:13]                 // 00000000006C: 878C0C6A
  s_and_saveexec_b64  s[12:13], s[12:13]                // 000000000070: BE8C240C
  v_mov_b32     v3, 0                                   // 000000000074: 7E060280
  s_cbranch_execz  label_0021                           // 000000000078: BF880002
  s_andn2_b64   s[10:11], s[10:11], exec                // 00000000007C: 8A8A7E0A
  s_cbranch_scc0  label_0029                            // 000000000080: BF840008
label_0021:
  s_and_b64     exec, s[12:13], s[10:11]                // 000000000084: 87FE0A0C
  v_add_i32     v2, vcc, v3, v5                         // 000000000088: 4A040B03
  v_add_i32     v7, vcc, 1, v7                          // 00000000008C: 4A0E0E81
  v_mov_b32     v19, v3                                 // 000000000090: 7E260303
  v_mov_b32     v3, v2                                  // 000000000094: 7E060302
  v_mov_b32     v2, v19                                 // 000000000098: 7E040313
  s_branch      label_000E                              // 00000000009C: BF82FFE6
  v_mov_b32     v3, 0                                   // 0000000000A0: 7E060280
label_0029:
  s_mov_b64     exec, s[8:9]                            // 0000000000A4: BEFE0408
  v_cmp_eq_u32  s[2:3], v3, 1                           // 0000000000A8: D1840002 00010303
  s_mov_b64     s[8:9], exec                            // 0000000000B0: BE88047E
  s_andn2_b64   exec, s[8:9], s[2:3]                    // 0000000000B4: 8AFE0208
  s_cbranch_execz  label_003F                           // 0000000000B8: BF880010
  s_mov_b64     s[10:11], exec                          // 0000000000BC: BE8A047E
  s_andn2_b64   exec, s[10:11], s[2:3]                  // 0000000000C0: 8AFE020A
  v_mov_b32     v3, 0                                   // 0000000000C4: 7E060280
  s_cbranch_execz  label_003F                           // 0000000000C8: BF88000C
  ds_read_b64   v[5:6], v3                              // 0000000000CC: D9D80000 05000003
  s_waitcnt     lgkmcnt(0)                              // 0000000000D4: BF8C007F
  v_mov_b32     v6, v5                                  // 0000000000D8: 7E0C0305
  ds_write_b64  v3, v[6:7]                              // 0000000000DC: D9340000 00000603
  ds_read_b64   v[4:5], v3                              // 0000000000E4: D9D80000 04000003
  s_waitcnt     lgkmcnt(0)                              // 0000000000EC: BF8C007F
  v_sub_i32     v4, vcc, s6, v2                         // 0000000000F0: 4C080406
  ds_write_b64  v3, v[4:5]                              // 0000000000F4: D9340000 00000403
label_003F:
  s_mov_b64     exec, s[0:1]                            // 0000000000FC: BEFE0400
  s_waitcnt     lgkmcnt(0)                              // 000000000100: BF8C007F
  s_barrier                                             // 000000000104: BF8A0000
  v_mov_b32     v2, 0                                   // 000000000108: 7E040280
  ds_read_b64   v[2:3], v2                              // 00000000010C: D9D80000 02000002
  s_load_dword  s0, s[4:5], 0x0d                        // 000000000114: C000050D
  s_waitcnt     lgkmcnt(0)                              // 000000000118: BF8C007F
  v_lshlrev_b32  v2, 4, v2                              // 00000000011C: 34040484
  v_lshlrev_b32  v3, 4, v3                              // 000000000120: 34060684
  v_add_i32     v17, vcc, v2, v0                        // 000000000124: 4A220102
  v_add_i32     v0, vcc, v3, v1                         // 000000000128: 4A000303
  v_ashrrev_i32  v18, 31, v17                           // 00000000012C: 3024229F
  v_ashrrev_i32  v1, 31, v0                             // 000000000130: 3002009F
  s_ashr_i32    s1, s0, 31                              // 000000000134: 91019F00
  v_mul_hi_u32  v4, v17, s0                             // 000000000138: D2D40004 00000111
  v_mul_lo_u32  v5, v18, s0                             // 000000000140: D2D20005 00000112
  v_mul_hi_u32  v6, v0, s0                              // 000000000148: D2D40006 00000100
  v_mul_lo_u32  v7, v1, s0                              // 000000000150: D2D20007 00000101
  s_load_dwordx4  s[8:11], s[4:5], 0x0e                 // 000000000158: C084050E
  v_add_i32     v4, vcc, v5, v4                         // 00000000015C: 4A080905
  v_mul_lo_u32  v5, v17, s1                             // 000000000160: D2D20005 00000311
  v_mul_lo_u32  v8, v17, s0                             // 000000000168: D2D20008 00000111
  v_add_i32     v6, vcc, v7, v6                         // 000000000170: 4A0C0D07
  v_mul_lo_u32  v7, v0, s1                              // 000000000174: D2D20007 00000300
  v_mul_lo_u32  v9, v0, s0                              // 00000000017C: D2D20009 00000100
  v_add_i32     v4, vcc, v5, v4                         // 000000000184: 4A080905
  v_add_i32     v15, vcc, v8, v0                        // 000000000188: 4A1E0108
  v_addc_u32    v16, vcc, v4, v1, vcc                   // 00000000018C: 50200304
  v_add_i32     v6, vcc, v7, v6                         // 000000000190: 4A0C0D07
  v_add_i32     v13, vcc, v9, v17                       // 000000000194: 4A1A2309
  v_addc_u32    v14, vcc, v6, v18, vcc                  // 000000000198: 501C2506
  v_lshl_b64    v[8:9], v[13:14], 2                     // 00000000019C: D2C20008 0001050D
  v_lshl_b64    v[10:11], v[15:16], 2                   // 0000000001A4: D2C2000A 0001050F
  s_waitcnt     lgkmcnt(0)                              // 0000000001AC: BF8C007F
  v_add_i32     v8, vcc, s10, v8                        // 0000000001B0: 4A10100A
  v_mov_b32     v12, s11                                // 0000000001B4: 7E18020B
  v_addc_u32    v9, vcc, v12, v9, vcc                   // 0000000001B8: 5012130C
  v_add_i32     v10, vcc, s10, v10                      // 0000000001BC: 4A14140A
  v_addc_u32    v11, vcc, v12, v11, vcc                 // 0000000001C0: 5016170C
  flat_load_dword  v10, v[10:11]                        // 0000000001C4: DC300000 0A00000A
  flat_load_dword  v8, v[8:9]                           // 0000000001CC: DC300000 08000008
  s_load_dwordx2  s[0:1], s[4:5], 0x12                  // 0000000001D4: C0400512
  v_add_i32     v6, vcc, v13, s8                        // 0000000001D8: D24A6A06 0000110D
  v_mov_b32     v9, s9                                  // 0000000001E0: 7E120209
  v_addc_u32    v7, vcc, v14, v9, vcc                   // 0000000001E4: 500E130E
  v_lshl_b64    v[6:7], v[6:7], 2                       // 0000000001E8: D2C20006 00010506
  s_waitcnt     vmcnt(1) & lgkmcnt(0)                   // 0000000001F0: BF8C0071
  v_add_f32     v9, 0x3c23d70a, v10                     // 0000000001F4: 061214FF 3C23D70A
  v_cmp_eq_i64  s[2:3], v[17:18], v[0:1]                // 0000000001FC: D1440002 00020111
  s_waitcnt     vmcnt(0)                                // 000000000204: BF8C0F70
  v_add_f32     v0, 0x3c23d70a, v8                      // 000000000208: 060010FF 3C23D70A
  v_add_i32     v1, s[4:5], s0, v6                      // 000000000210: D24A0401 00020C00
  v_mov_b32     v2, s1                                  // 000000000218: 7E040201
  v_addc_u32    v2, vcc, v2, v7, s[4:5]                 // 00000000021C: D2506A02 00120F02
  v_cndmask_b32  v3, v10, v9, s[2:3]                    // 000000000224: D2000003 000A130A
  v_cndmask_b32  v0, v8, v0, s[2:3]                     // 00000000022C: D2000000 000A0108
  v_cmp_gt_f32  vcc, v0, v3                             // 000000000234: 7C080700
  s_and_saveexec_b64  s[2:3], vcc                       // 000000000238: BE82246A
  s_cbranch_execz  label_009D                           // 00000000023C: BF88000D
  flat_store_dword  v[1:2], v0                          // 000000000240: DC700000 00000001
  v_add_i32     v1, vcc, v15, s8                        // 000000000248: D24A6A01 0000110F
  v_mov_b32     v2, s9                                  // 000000000250: 7E040209
  v_addc_u32    v2, vcc, v16, v2, vcc                   // 000000000254: 50040510
  v_lshl_b64    v[1:2], v[1:2], 2                       // 000000000258: D2C20001 00010501
  v_add_i32     v1, vcc, s0, v1                         // 000000000260: 4A020200
  v_mov_b32     v3, s1                                  // 000000000264: 7E060201
  v_addc_u32    v2, vcc, v3, v2, vcc                    // 000000000268: 50040503
  flat_store_dword  v[1:2], v0                          // 00000000026C: DC700000 00000001
label_009D:
  s_andn2_b64   exec, s[2:3], exec                      // 000000000274: 8AFE7E02
  s_cbranch_execz  label_00AC                           // 000000000278: BF88000D
  flat_store_dword  v[1:2], v3                          // 00000000027C: DC700000 00000301
  v_add_i32     v0, vcc, v15, s8                        // 000000000284: D24A6A00 0000110F
  v_mov_b32     v1, s9                                  // 00000000028C: 7E020209
  v_addc_u32    v1, vcc, v16, v1, vcc                   // 000000000290: 50020310
  v_lshl_b64    v[0:1], v[0:1], 2                       // 000000000294: D2C20000 00010500
  v_add_i32     v0, vcc, s0, v0                         // 00000000029C: 4A000000
  v_mov_b32     v2, s1                                  // 0000000002A0: 7E040201
  v_addc_u32    v1, vcc, v2, v1, vcc                    // 0000000002A4: 50020302
  flat_store_dword  v[0:1], v3                          // 0000000002A8: DC700000 00000300
label_00AC:
  s_endpgm                                              // 0000000002B0: BF810000
end

